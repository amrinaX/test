library ieee;
use ieee.std_logic_1164.all;


entity state_ascii is
	port(
			clk,pwr,bl						            	: in std_logic;
			lcm_rs,lcm_on,lcm_blon			            : out std_logic;
			Buffer0,Buffer1,buffer2,sign_buff			: in std_logic_vector(7 downto 0);
			op_buff1,op_buff2,op_buff3,op_buff4			: in std_logic_vector(7 downto 0);
			lcm_data						               	: out std_logic_vector(7 downto 0)
		);
end state_ascii;

architecture behavioural of state_ascii is
	type state_type is (
							ini_ln_fn,ini_lcd_off,ini_lcd_clr,ini_lcd_on,ini_lcd_2ndline,
							entry_mode_set,sign_0,
							res_buffer0,res_buffer1,res_buffer2,
							op_state0,op_state1,op_state2,op_state3,
							return_home
						);
	signal cur_state, next_state: state_type;

begin
	process(cur_state)
	
	begin
	
		case cur_state is
			when ini_ln_fn =>
				next_state <= ini_lcd_off;

			when ini_lcd_off =>
				next_state <= ini_lcd_clr;

			when ini_lcd_clr =>
				next_state <= ini_lcd_on;

			when ini_lcd_on =>
				next_state <= entry_mode_set;
				
			when entry_mode_set =>
				next_state <= sign_0;
				
			when sign_0 =>
				next_state<= res_buffer2;
				
			when res_buffer2 =>
				next_state <= res_buffer1;
				
			when res_buffer1 =>
			   next_state <= res_buffer0;
				
			when res_buffer0 =>
				next_state <= ini_lcd_2ndline;
				
			when ini_lcd_2ndline =>
				next_state <= op_state0;
				
			when op_state0 =>
				next_state <= op_state1;
				
			when op_state1 =>
				next_state <= op_state2;
				
			when op_state2 =>
				next_state <= op_state3;
				
			when op_state3 =>
			   next_state <= return_home;
				
			when others =>
				next_state <= return_home;

		end case;
		
	end process;

	Process(clk, pwr)
	begin
		if (pwr = '0') then
			cur_state <= ini_ln_fn;
		elsif (clk'event and clk = '1') then
			if (pwr = '1') then
				cur_state <= next_state;
			end if;
		end if;
		
	end process;
	
	process(cur_state)
	begin
	
		case cur_state is
		
			when ini_ln_fn =>
				if (bl = '1') then
					lcm_blon <= '1';
				else
					lcm_blon <= '0';
				end if;
				lcm_rs <= '0';
				lcm_on <= '1';
				lcm_data <= X"38";

			when ini_lcd_off =>
				if (bl = '1') then
					lcm_blon <= '1';
				else
					lcm_blon <= '0';
				end if;
				lcm_rs <= '0';
				lcm_on <= '1';
				lcm_data <= X"08";

			when ini_lcd_clr =>
				if (bl = '1') then
					lcm_blon <= '1';
				else
					lcm_blon <= '0';
				end if;
				lcm_rs <= '0';
				lcm_on <= '1';
				lcm_data <= X"01";

			when ini_lcd_on =>
				if (bl = '1') then
					lcm_blon <= '1';
				else
					lcm_blon <= '0';
				end if;
				lcm_rs <= '0';
				lcm_on <= '1';
				lcm_data <= X"0C";

			when entry_mode_set =>
				if (bl = '1') then
					lcm_blon <= '1';
				else
					lcm_blon <= '0';
				end if;
				lcm_rs <= '0';
				lcm_on <= '1';
				lcm_data <= X"06";
				
			when ini_lcd_2ndline =>
				if (bl = '1') then
					lcm_blon <= '1';
				else
					lcm_blon <= '0';
				end if;
				lcm_rs <= '0';
				lcm_on <= '1';
				lcm_data <= X"C0";
				
			when res_buffer0 =>
				if (bl = '1') then
					lcm_blon <= '1';
			else
				lcm_blon <= '0';
			end if;
					lcm_rs <='1';
					lcm_on <='1';
					lcm_data <= buffer0;			-------------------------- digit1
					
			when res_buffer1 =>
				if (bl = '1') then
					lcm_blon <= '1';
				else
					lcm_blon <= '0';
				end if;
					lcm_rs <='1';
					lcm_on <='1';
					lcm_data <= buffer1;		------------------------------ digit2
					
			when res_buffer2 =>
				if (bl = '1') then
					lcm_blon <= '1';
				else
					lcm_blon <= '0';
				end if;
					lcm_rs <='1';
					lcm_on <='1';
					lcm_data <= buffer2;   ---------------------------------digit3
				
			when sign_0 =>
				if (bl = '1') then
					lcm_blon <= '1';
				else
					lcm_blon <= '0';
				end if;
					lcm_rs <='1';
					lcm_on <='1';
					lcm_data <= sign_buff;-----------------------------------sign
					
			when op_state0 =>
				if (bl = '1') then
					lcm_blon <= '1';
				else
					lcm_blon <= '0';
				end if;
					lcm_rs <='1';
					lcm_on <='1';
					lcm_data <= op_buff1;-----------------------------------opcode0
					
			when op_state1 =>
				if (bl = '1') then
					lcm_blon <= '1';
				else
					lcm_blon <= '0';
				end if;
					lcm_rs <='1';
					lcm_on <='1';
					lcm_data <= op_buff2;-----------------------------------opcode1
					
			when op_state2 =>
				if (bl = '1') then
					lcm_blon <= '1';
				else
					lcm_blon <= '0';
				end if;
					lcm_rs <='1';
					lcm_on <='1';
					lcm_data <= op_buff3;-----------------------------------opcode2
					
			when op_state3 =>
				if (bl = '1') then
					lcm_blon <= '1';
				else
					lcm_blon <= '0';
				end if;
					lcm_rs <='1';
					lcm_on <='1';
					lcm_data <= op_buff4;-----------------------------------opcode3


			when others =>
				if (bl = '1') then
					lcm_blon <= '1';
				else
					lcm_blon <= '0';
				end if;
				lcm_rs <= '0';
				lcm_on <= '1';
				lcm_data <= X"02";

		end case;
	
	end process;

end behavioural;